name: Sync upstream x402 examples/fullstack/next

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  schedule: [ { cron: "0 * * * *" } ]  # hourly
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions: { contents: write, pull-requests: write }
    env:
      UPSTREAM_REPO: coinbase/x402
      UPSTREAM_PATH: examples/typescript/fullstack/next
    steps:
      - uses: actions/checkout@v4

      - name: Sparse clone upstream
        run: |
          git clone --depth=1 --filter=blob:none --sparse https://github.com/${UPSTREAM_REPO}.git upstream
          cd upstream
          git sparse-checkout set "${UPSTREAM_PATH}"
          echo "UPSTREAM_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Resolve latest x402-next version from npm
        run: |
          set -euo pipefail
          VERSION=$(npm view x402-next version || echo "0.0.0")
          echo "X402_NEXT_VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Record resolved version in root package.json
        run: |
          node -e "const fs=require('fs');const p='package.json';const j=JSON.parse(fs.readFileSync(p,'utf8'));(j.config??={});j.config.x402NextVersion=process.env.X402_NEXT_VERSION;fs.writeFileSync(p,JSON.stringify(j,null,2));"

      - name: Stage upstream into vendor folder
        run: |
          rm -rf vendor/upstream && mkdir -p vendor/upstream
          rsync -a --delete upstream/${UPSTREAM_PATH}/ vendor/upstream/

      - name: Sanitize & map into template (best-effort)
        run: |
          if [ -f scripts/sanitize.sh ]; then
            chmod +x scripts/sanitize.sh
            scripts/sanitize.sh "${UPSTREAM_PATH}" "${UPSTREAM_SHA}"
          else
            echo "No sanitize script found; skipping."
          fi

      - name: Inject x402-next version into template/package.json
        run: |
          node -e "const fs=require('fs');const p='template/package.json';if(fs.existsSync(p)){const j=JSON.parse(fs.readFileSync(p,'utf8'));const v=process.env.X402_NEXT_VERSION;const setVer=(obj)=>{if(!obj)return false; if(Object.prototype.hasOwnProperty.call(obj,'x402-next')){if(v!=='0.0.0'){obj['x402-next']='^'+v;} else {delete obj['x402-next'];} return true;} return false;};const changed=setVer(j.dependencies)||setVer(j.devDependencies);if(!changed && v!=='0.0.0'){(j.dependencies??={})['x402-next']='^'+v;}fs.writeFileSync(p,JSON.stringify(j,null,2));}"

      - name: Determine if there are changes
        run: |
          # include untracked files in change detection
          if git diff --quiet && git ls-files --others --exclude-standard --error-unmatch . >/dev/null 2>&1; then
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi

      - name: Bump starter package version (patch)
        if: ${{ env.HAS_CHANGES == 'true' }}
        run: |
          node -e "const fs=require('fs');const p='package.json';const j=JSON.parse(fs.readFileSync(p,'utf8'));const v=j.version||'0.0.0';const parts=v.split('.').map(n=>parseInt(n,10));while(parts.length<3)parts.push(0);parts[2]=isNaN(parts[2])?0:parts[2]+1;j.version=parts.join('.');fs.writeFileSync(p,JSON.stringify(j,null,2));"

      - name: Open PR with changes
        uses: peter-evans/create-pull-request@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit-message: "chore(next): sync from ${UPSTREAM_REPO}@${{ env.UPSTREAM_SHA }}"
          branch: chore/sync-upstream
          title: "Sync upstream (fullstack/next) â€” ${{ env.UPSTREAM_SHA }}"
          body: |
            Auto-synced from https://github.com/${{ env.UPSTREAM_REPO }}
            Path: ${{ env.UPSTREAM_PATH }}
            SHA:  ${{ env.UPSTREAM_SHA }}

